@incollection{bea22,
  title      = {{{API-First Design}}: {{A Survey}} of the {{State}} of {{Academia}} and {{Industry}}},
  shorttitle = {{{API-First Design}}},
  booktitle  = {{{ITNG}} 2022 19th {{International Conference}} on {{Information Technology-New Generations}}},
  author     = {Beaulieu, Nicole and Dascalu, Sergiu and Hand, Emily},
  editor     = {Latifi, Shahram},
  date       = {2022-02-14},
  series     = {Advances in {{Intelligent Systems}} and {{Computing}}},
  volume     = {1421},
  pages      = {73--79},
  publisher  = {Springer International Publishing},
  location   = {Cham},
  doi        = {10.1007/978-3-030-97652-1_10},
  url        = {https://link.springer.com/10.1007/978-3-030-97652-1_10},
  urldate    = {2024-12-17},
  abstract   = {The evolution of distributed and cloud-based systems has led the computing community to converge on Microservice Architecture (MSA) as a preferred solution to distributed software design. Established design methodologies applied to MSA (e.g., Data-, Model-, and Domain-Driven Design) assist in decision-making about business capacity and functionality encapsulated by the microservice. An expected result of microservice design is a welldefined Application Programming Interface (API) that facilitates the access of microservice and system capabilities. However, even with the extensive documentation and defined frameworks guiding practitioners in their execution of MSA, challenges exist in defining and exposing clean APIs. Further, the industry's current focus on maximizing business capacities exposed by distributed systems emphasizes the importance of improving API design and implementation. To this end, API-First Design is emerging as a viable approach to MSA and API design. API-First principles suggest that all capabilities of an organization and its systems are exposed via an API and that the foundation of system design is the definition of clear and welldefined APIs. A significant challenge associated with API-First Design lies in the infancy of the topic and the necessity for peer-reviewed research defining guidelines for adoption and a baseline for future research. This paper seeks to move the state of the API-First Design methodology forward by exploring publications of the academic community and grey literature available on the topic. The paper concludes with a discussion about future research opportunities that may advance the understanding and adoption of API-First Design.},
  isbn       = {978-3-030-97652-1},
  langid     = {english},
  keywords   = {API-Design,API-First,Microservices,notion,Primarquelle},
  file       = {/Users/fabian/Zotero/storage/84LQLK3G/Beaulieu et al., 2022 – API-First Design A Survey of the State of Academia and Industry.pdf}
}

@article{cha21,
  title        = {{{API First Development}}: {{A Modern Approach}} to {{Building Integrated Software Systems}}},
  shorttitle   = {{{API First Development}}},
  author       = {Chandrachood, Akshay},
  date         = {2021-10-05},
  journaltitle = {International Journal of Science and Research (IJSR)},
  shortjournal = {IJSR},
  volume       = {10},
  number       = {10},
  pages        = {1627--1629},
  issn         = {2319-7064},
  doi          = {10.21275/SR24608141605},
  url          = {https://www.ijsr.net/getabstract.php?paperid=SR24608141605},
  urldate      = {2024-11-30},
  abstract     = {API First Development is a strategic methodology that puts emphasis on the design and definition of APIs before writing any code that might implement them. It is gaining popularity in the modern software development landscape because of various trends, such as microservices, mobile applications, and the Internet of Things, to name a few. By treating APIs as first-class citizens and establishing a clearly defined agreement between the API supplier and the consumer, API First Development can significantly enhance collaboration between the frontend and backend teams. It supports scalable architectures, such as microservices, and speeds up the development process, resulting in faster time to market. Furthermore, the development approach helps to ensure consistent, uniform, and well-defined APIs for better maintainability and integration between systems. This paper delves deeper into the principles of API First Development, emphasizing consumer-centric design, the design before code approach, enhancing scaling and flexibility, accelerating the development cycle, and providing practical implementation strategies. This includes best practices in API design, using tools such as OpenAPI and Swagger, versioning techniques, comprehensive documentation, mock servers, and testing tools. Following these guidelines will result in clear software integration and system design that will be efficient, scalable, and maintainable, leading to more general and cost-effective software solutions.},
  langid       = {english},
  keywords     = {API-Design,API-First,Microservices,notion,OpenAPI,Primarquelle},
  file         = {/Users/fabian/Zotero/storage/NJTM8N6F/Chandrachood, 2021 – API First Development A Modern Approach to Building Integrated Software Systems.pdf}
}

@inbook{de23,
  title      = {The {{API-First Approach}} for {{Digital Transformation}}},
  booktitle  = {{{API Management}}},
  author     = {De, Brajesh},
  date       = {2023-12-20},
  pages      = {349--364},
  publisher  = {Apress},
  location   = {Berkeley, CA},
  doi        = {10.1007/979-8-8688-0054-2_14},
  url        = {https://link.springer.com/10.1007/979-8-8688-0054-2_14},
  urldate    = {2024-11-30},
  abstract   = {API-first is a product-centric approach to building software products that put APIs at the center of all development. It begins with defining the API interface rather than creating it as an afterthought. This approach makes every product functionality accessible to other systems via API. This chapter introduces the detailed philosophy and concepts of building applications with an API-first approach. The chapter covers the benefits of following the API-first approach. Some of the core principles to be followed, the approach to get started with the API-first journey, and the probable challenges that may have to be overcome for adopting the API-first approach for the digital transformation program are also covered in this chapter.},
  bookauthor = {De, Brajesh},
  isbn       = {979-8-8688-0054-2},
  langid     = {english},
  keywords   = {API-First,notion,Primarquelle},
  file       = {/Users/fabian/Zotero/storage/JBFVDN2Z/De, 2023 – The API-First Approach for Digital Transformation.pdf}
}

@article{dud20,
  title        = {An {{API-first Methodology}} for {{Designing}} a {{Microservice-based Backend}} as a {{Service Platform}}},
  author       = {Dudjak, Mario and Martinovi\'c, Goran},
  date         = {2020-06-16},
  journaltitle = {Information Technology And Control},
  shortjournal = {ITC},
  volume       = {49},
  number       = {2},
  pages        = {206--223},
  issn         = {2335-884X},
  doi          = {10.5755/j01.itc.49.2.23757},
  url          = {http://itc.ktu.lt/index.php/ITC/article/view/23757},
  urldate      = {2024-11-30},
  abstract     = {Over the last several years, cloud computing has imposed as a major paradigm in software development by providing computer resources over the Internet. Among various cloud service models, Backend as a Service (BaaS) stands out as a model that targets the specific needs of web and mobile developers. By providing the backend for applications, it facilitates and expedites the software development process. In order to prevent major problems with the use of third-party BaaS providers, this paper advocates building your own BaaS platform, as well as several works ahead of it. However, the development of a BaaS platform carries various challenges regarding architecture and design. This paper strives to define the core service offerings of a BaaS platform and propose a method for providing an architectural design of a BaaS platform based on a microservice architecture. Microservice architecture is the preferred architectural style for cloud solutions since it promotes loose coupling, ease of scaling and integration with third-party services, which are fundamental stipulations of BaaS platforms. The methodology adopted in designing a microservice-based BaaS platform was formed in accordance with an Application Programming Interface (API)-first approach, which strives to design a suitable, representative API of the platform. To the best of authors' knowledge, this paper proposes the lowest-level design of a BaaS platform so far, describing the entity relations, integration patterns, and communication styles. Ultimately, the proposed design was implemented and tested for its functional requirements. In that regard, specific test cases that mirror the actual workflow of the BaaS platform were constructed.},
  langid       = {english},
  keywords     = {API Testing,API-First,Microservices},
  file         = {/Users/fabian/Zotero/storage/GV4D47V5/Dudjak und Martinović, 2020 – An API-first Methodology for Designing a Microservice-based Backend as a Service Platform.pdf}
}

@article{kul23,
  title        = {Building {{Enterprise-Wide API-First Strategy}} for {{Medium}} to {{Large Organizations}}},
  author       = {Kulkarni, Nilesh and Bansal, Saurav},
  date         = {2023-02-24},
  journaltitle = {Journal of Economics \& Management Research},
  shortjournal = {J Econ Managem Res},
  volume       = {4},
  number       = {1},
  pages        = {1--5},
  issn         = {2755-0214},
  doi          = {10.47363/JESMR/2022(4)219},
  url          = {https://www.onlinescientificresearch.com/articles/building-enterprisewide-apifirst-strategy-for-medium-to-large-organizations.pdf},
  urldate      = {2024-11-30},
  abstract     = {In this paper, we provided a comprehensive guide on implementing an API-first approach within medium to large organizations. The basic framework starts by defining APIs and their role in modern business systems, using an example of two companies sharing order-related information through APIs. We covered the concept of API-first as a design philosophy, the growth of API usage, and the complexities faced by medium to large organizations in API adoption. The paper also discusses different integration patterns, the importance of understanding API and integration strategies, and the key elements for a successful API-first integration strategy. Additionally, it emphasizes the role of API gateways, the need for standardized API documentation, and the avoidance of excessive reuse of APIs. The document highlighted the importance of measuring API success using business KPIs. The paper concludes with the real-life example of the large organization with complex ERP and data systems and how the guidelines provided in the paper can help abstract the complexities with the help of API-First approach, finally the paper covered the security and data consistency as an important factor in defining the strategy.},
  langid       = {english},
  keywords     = {API-First,Microservices,notion,Primarquelle},
  file         = {/Users/fabian/Zotero/storage/M89T7REJ/Kulkarni und Bansal, 2023 – Building Enterprise-Wide API-First Strategy for Medium to Large Organizations.pdf}
}

@online{mil24,
  title        = {{{OpenAPI Specification}} v3.1.1},
  shorttitle   = {{{OpenAPI Specification}}},
  author       = {Miller, Darrel and Andrews, Henry and Whitlock, Jeremy and Mitchell, Lorna and Gardiner, Marsh and Quintero, Miguel and Kistler, Mike and Handl, Ralf and Ratovsky, Ron},
  date         = {2024-10-24},
  url          = {https://spec.openapis.org/oas/v3.1.1.html},
  urldate      = {2024-12-27},
  abstract     = {The OpenAPI Specification (OAS) defines a standard, programming language-agnostic interface description for HTTP APIs, which allows both humans and computers to discover and understand the capabilities of a service without requiring access to source code, additional documentation, or inspection of network traffic. When properly defined via OpenAPI, a consumer can understand and interact with the remote service with a minimal amount of implementation logic. Similar to what interface descriptions have done for lower-level programming, the OpenAPI Specification removes guesswork in calling a service.},
  langid       = {english},
  organization = {OpenAPI Initiative},
  keywords     = {OpenAPI},
  file         = {/Users/fabian/Zotero/storage/W2CW7444/Miller et al., 2024 – OpenAPI Specification v3.1.1.pdf;/Users/fabian/Zotero/storage/S2HYYQP9/Miller et al., 2024 – OpenAPI Specification v3.1.1.html}
}

@online{ope23,
  type         = {Dokumentation},
  title        = {Getting {{Started}}},
  author       = {{OpenAPI Initiative}},
  date         = {2023-10-01},
  url          = {https://learn.openapis.org/},
  urldate      = {2025-02-03},
  langid       = {american},
  organization = {OpenAPI Documentation},
  keywords     = {notion,OpenAPI},
  file         = {/Users/fabian/Zotero/storage/USAJWXHR/learn.openapis.org.html}
}

@online{ope23a,
  type         = {Dokumentation},
  title        = {Introduction},
  author       = {{OpenAPI Initiative}},
  date         = {2023-12-02},
  url          = {https://learn.openapis.org/introduction.html},
  urldate      = {2025-02-03},
  langid       = {american},
  organization = {OpenAPI Documentation},
  keywords     = {OpenAPI},
  file         = {/Users/fabian/Zotero/storage/V2B6P8U3/introduction.html}
}

@online{ope24,
  type         = {Dokumentation},
  title        = {Best {{Practices}}},
  author       = {{OpenAPI Initiative}},
  date         = {2024-02-05},
  url          = {https://learn.openapis.org/best-practices.html},
  urldate      = {2025-02-03},
  langid       = {american},
  organization = {OpenAPI Documentation},
  keywords     = {OpenAPI},
  file         = {/Users/fabian/Zotero/storage/9VJDW6D6/best-practices.html}
}

@inproceedings{riv13,
  title       = {{{MockAPI}}: {{An Agile Approach Supporting API-first Web Application Development}}},
  shorttitle  = {{{MockAPI}}},
  booktitle   = {Web {{Engineering}}},
  author      = {Rivero, Jos\'e Mat\'ias and Heil, Sebastian and Grigera, Juli\'an and Gaedke, Martin and Rossi, Gustavo},
  editor      = {Daniel, Florian and Dolog, Peter and Li, Qing},
  editora     = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Doug and Vardi, Moshe Y. and Weikum, Gerhard},
  editoratype = {redactor},
  date        = {2013},
  volume      = {7977},
  pages       = {7--21},
  publisher   = {Springer},
  location    = {Aalborg, D\"anemark},
  doi         = {10.1007/978-3-642-39200-9_4},
  url         = {http://link.springer.com/10.1007/978-3-642-39200-9_4},
  urldate     = {2024-11-30},
  abstract    = {In the last years, agile development methodologies have been widely adopted. However, they still lack support for API requirements while, at the same time, public RESTful APIs are fueling a rapid growth of web applications providing services built on other services. On the other hand, whereas Model-Driven Development techniques successfully increase the productivity in the development of data-intensive web applications, they lack the agility required when developing heterogeneous web applications with frequent requirement changes. In this paper we introduce MockAPI, an approach based on annotating user interface mockups that combines the advantages of agile approaches and Model-Driven Development. We introduce a metamodel for annotations and demonstrate how to derive running API prototypes as starting point for agile development. RESTful API best practices and API-first development are introduced into the agile process. The MockAPI approach defines a set of constraints to accelerate the development of web applications. We also show the results of a brief validation applying MockAPI to popular web sites.},
  eventtitle  = {International {{Conference}} on {{Web Engineering}}},
  isbn        = {978-3-642-39200-9},
  langid      = {english},
  seriestitle = {Lecture Notes in Computer Science},
  keywords    = {API-First,notion,Primarquelle,REST},
  file        = {/Users/fabian/Zotero/storage/GY32DPVU/Rivero et al., 2013 – MockAPI An Agile Approach Supporting API-first Web Application Development.pdf}
}

@inproceedings{ser24,
  title       = {{{OAS2Tree}}: {{Visual API-First Design}}},
  shorttitle  = {{{OAS2Tree}}},
  booktitle   = {Software {{Architecture}}. {{ECSA}} 2024 {{Tracks}} and {{Workshops}}},
  author      = {Serbout, Souhaila and Pautasso, Cesare},
  editor      = {Ampatzoglou, Apostolos and P\'erez, Jennifer and Buhnova, Barbora and Lenarduzzi, Valentina and Venters, Colin C. and Zdun, Uwe and Drira, Khalil and Rebelo, Luciana and Di Pompeo, Daniele and Tucci, Michele and Nakagawa, Elisa Yumi and Navarro, Elena},
  date        = {2024-09-01},
  volume      = {14937},
  pages       = {12--20},
  publisher   = {Springer Nature Switzerland},
  location    = {Cham},
  doi         = {10.1007/978-3-031-71246-3_2},
  url         = {https://link.springer.com/10.1007/978-3-031-71246-3_2},
  urldate     = {2024-11-30},
  abstract    = {OAS2tree is a tool designed to transform OpenAPI Specification (OAS) documents into tree-like visualizations, aiding in the understanding and navigation of the structure of REST APIs. By converting the detailed, verbose, and often complex OAS files into a visual tree structure, OAS2tree simplifies the comprehension of a Web API, highlighting the hierarchical relationships between endpoints, operations, and parameters. This visual representation is particularly useful for developers and stakeholders who need a quick overview of an API without delving into the intricate details of its technical specifications. OAS2tree can be integrated into the IDE through a Visual Studio code extension or used as a standalone web application. The tool currently has about 400 users and has been used on teaching, research, and development projects. In this paper, we present the design and implementation of OAS2tree, highlighting its features and use cases. We also highlight the limitations of the current version and discuss future improvements and potential extensions.},
  isbn        = {978-3-031-71246-3},
  langid      = {english},
  seriestitle = {Lecture Notes in Computer Science},
  keywords    = {API-First,OpenAPI},
  file        = {/Users/fabian/Zotero/storage/A8T7MX7E/Serbout und Pautasso, 2024 – OAS2Tree Visual API-First Design.pdf}
}

@article{vol22,
  title        = {A {{Single Specification Format}} as a {{Microservice API Artifact}} When {{Using API-First}}},
  author       = {Volushkova, Vera L'vovna and Volushkova, Aleksandra Yurievna},
  date         = {2022-12-30},
  journaltitle = {Software systems and computational methods},
  number       = {4},
  pages        = {54--62},
  issn         = {2454-0714},
  doi          = {10.7256/2454-0714.2022.4.39235},
  url          = {https://en.nbpublish.com/library_read_article.php?id=39235},
  urldate      = {2024-11-30},
  abstract     = {The object of research is the interaction protocols (API - Application Programming Interface) of microservices. The microservices API is an important development object because each microservice can be a client for any other microservice and be created by a separate team. To build a unified system of interaction between microservices, the API-First methodology for synchronizing communication protocols for server applications was used. The aim of the work is to create a way to develop API microservices of server java applications using spring-boot, spring-web, openapi-generator, springdoc libraries. The method is based on the fact that the API is the most important part of the product and therefore is created at the initial design stage. An approach based on a single microservices API and TDD testing technique is proposed, which increases the efficiency of managing the development of server-side java applications. The microservices API is built using the specification as the API artifact. The developed technique allows: use the created API by another team, regardless of the development language; increase the productivity of development teams; to carry out a qualitative description of methods and models; reduce the amount of routine code by generating code from the specification; identify API design errors earlier than with the standard development approach (API after implementation) by applying TDD and working with the API before it is implemented.},
  langid       = {english},
  keywords     = {API-First,Code-first,Microservices,notion,OpenAPI,Primarquelle,REST,Spring Framework,Test Driven Development (TDD)},
  file         = {/Users/fabian/Zotero/storage/H7TETQEC/Volushkova und Volushkova, 2022 – A Single Specification Format as a Microservice API Artifact when Using API-First.html}
}

@article{wid24,
  title        = {Backend {{Infrastructure}} and {{Specifications Design Using OpenAPI}} and {{API-First}} on {{CV Elang Java Mandiri}}},
  author       = {Widatama, Yohanes Bagas Ari and Anwar, Nizirwan and Widodo, Agung Mulyo and Ichwani, Arief},
  date         = {2024-08-20},
  journaltitle = {Jurnal Indonesia Sosial Teknologi},
  shortjournal = {JIST},
  volume       = {5},
  number       = {8},
  pages        = {3708--3720},
  issn         = {2745-5254},
  url          = {https://jist.publikasiindonesia.id/index.php/jist/article/view/1174},
  abstract     = {Digital transformation brings changes to the business world by increasing efficiency, convenience, security, certainty and operational speed. CV Elang Java Mandiri experienced the positive impact of this by creating software to increase operational efficiency. However, the use of direct communication between the desktop application and the database causes vulnerabilities. The lack of a bridge between the desktop application and the database also indicates a lack of flexibility when adding other applications. Ransomware attacks on desktop applications cause losses and limitations in development. This research focuses on backend updates that use API as an integrator with the API-first method. OpenAPI standards and OWASP security principles are used to increase resilience against security threats. These steps were tested with OWASP ZAP and http test. The goal is to provide solutions to company problems, meet the need for more secure applications, and make application development easier.},
  langid       = {english},
  keywords     = {API-First,OpenAPI,REST},
  file         = {/Users/fabian/Zotero/storage/D646MZQY/Widatama et al., 2024 – Backend Infrastructure and Specifications Design Using OpenAPI and API-First on CV Elang Java Mandir.pdf}
}
